나뉘기 때문에 한눈에 각 구성요소를 쉽게 찾고 이해할 수 있다.

식별 디비전: 기본적으로 메타데이터 세션으로, 프로그램과 작성자 등에 대한 세부 정보를 포함한다.
환경 디비전: 외부 장치의 별칭과 같이 다른 하드웨어에서 프로그램을 실행할 때 편집이 필요할 수 있는 런타임 환경에 대한 세부 정보를 포함한다. 예를 들어 I/O 처리 방식이 상호 전혀 다른 시스템 간의 프로그램 이식성에 도움이 된다.
데이터 디비전: 파일과 작업 스토리지 세션을 포함한다. 데이터 디비전은 프로그램에 사용되는 파일과 변수(각각)를 기술한다.
프로시저 디비전: 실제 프로그램 코드가 위치하는 곳으로 논리적 단위인 세션, 패러그래프, 문장, 문으로 나뉜다. 이 구조는 유사한 기능을 수행하는 모듈이나 함수와 비슷해 보이지만(제한된 입력과 출력으로 코드를 블록으로 나눔) 유연성이 상대적으로 훨씬 더 떨어진다.

또한 코볼은 서식 규칙이 극히 엄격해, 명령 앞의 공백 개수까지 따질 정도다(파이썬 사용자라면 익숙할 것이다). 이와 같은 제약 중 일부는 코볼이 1960년대 메인프레임 시대에 탄생한 데 따른 부산물이다. 당시에는 프로그램이 펀칭 카드에 인코딩됐으므로 정확한 80열 서식이 중요했다. 그 외의 서식 제한은 가독성을 위한 것이다.

코볼 프로그램의 엄격한 규격화는 코드 자체가 최대한 프로그램을 잘 설명하도록 만들기 위한 것이다. 코볼 프로그램은 수년, 수십 년 동안 한 자리에서 사용되는 경우가 흔했다. 설계자들의 의도(또는 최종적인 결과)는 코볼 프로그램은 수년이 지난 후에도 그 프로그램을 만든 프로그래머의 도움 없이 어느 코볼 프로그래머라도 이해할 수 있도록 한다는 것이었다.


원문보기:
https://www.itworld.co.kr/tags/1533/%EC%BD%94%EB%B3%BC/151805#csidx226c1b70d2079a8b2c47f1fa3a1d20b